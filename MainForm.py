# Form implementation generated from reading ui file 'form.ui'
#
# Created by: PyQt6 UI code generator 6.6.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from algorithms import *
from draw import *
from draw import Draw
from pio import *

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1748, 1252)
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.Canvas = Draw(parent=self.centralwidget)
        self.Canvas.setObjectName("Canvas")
        self.horizontalLayout.addWidget(self.Canvas)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1748, 22))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(parent=self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuSimplify = QtWidgets.QMenu(parent=self.menubar)
        self.menuSimplify.setObjectName("menuSimplify")
        self.menuView = QtWidgets.QMenu(parent=self.menubar)
        self.menuView.setObjectName("menuView")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.toolBar = QtWidgets.QToolBar(parent=MainWindow)
        self.toolBar.setObjectName("toolBar")
        MainWindow.addToolBar(QtCore.Qt.ToolBarArea.TopToolBarArea, self.toolBar)
        self.actionOpen = QtGui.QAction(parent=MainWindow)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("images/icons/open_file.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionOpen.setIcon(icon)
        self.actionOpen.setObjectName("actionOpen")
        self.actionExit = QtGui.QAction(parent=MainWindow)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("images/icons/exit.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionExit.setIcon(icon1)
        self.actionExit.setObjectName("actionExit")
        self.actionMinimum_bounding_rectangle = QtGui.QAction(parent=MainWindow)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("images/icons/maer.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionMinimum_bounding_rectangle.setIcon(icon2)
        self.actionMinimum_bounding_rectangle.setObjectName("actionMinimum_bounding_rectangle")
        self.actionPCA = QtGui.QAction(parent=MainWindow)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("images/icons/pca.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionPCA.setIcon(icon3)
        self.actionPCA.setObjectName("actionPCA")
        self.actionClear_results = QtGui.QAction(parent=MainWindow)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("images/icons/clear_ch.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionClear_results.setIcon(icon4)
        self.actionClear_results.setObjectName("actionClear_results")
        self.actionClear_all = QtGui.QAction(parent=MainWindow)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("images/icons/clear_er.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionClear_all.setIcon(icon5)
        self.actionClear_all.setObjectName("actionClear_all")
        
        # Action definition (new)
        self.actionLongestEdge = QtGui.QAction(QtGui.QIcon('images/icons/longestedge.png'), "Longest edge", MainWindow)
        self.actionWallAverage = QtGui.QAction(QtGui.QIcon('images/icons/wa.png'), "Wall average", MainWindow)
        self.actionWeightedBisector = QtGui.QAction(QtGui.QIcon('images/icons/weightedbisector.png'), "Weighted bisector", MainWindow)
        
        # UPPER BAR -------
        # File
        self.menuFile.addAction(self.actionOpen)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionExit)
        
        # Simplyfy
        self.menuSimplify.addAction(self.actionMinimum_bounding_rectangle)
        self.menuSimplify.addAction(self.actionPCA)
        
        # new functions simplify
        self.menuSimplify.addAction(self.actionLongestEdge)
        self.menuSimplify.addAction(self.actionWallAverage)
        self.menuSimplify.addAction(self.actionWeightedBisector)
        
        # View
        self.menuView.addAction(self.actionClear_results)
        self.menuView.addSeparator()
        self.menuView.addAction(self.actionClear_all)
        
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuSimplify.menuAction())
        self.menubar.addAction(self.menuView.menuAction())
        
        # TOOL BAR ------
        # open icon
        self.toolBar.addAction(self.actionOpen)
        # separator
        self.toolBar.addSeparator()
        
        # Functions
        self.toolBar.addAction(self.actionMinimum_bounding_rectangle) # minimum area enclosing rectangle
        self.toolBar.addAction(self.actionPCA) # pca
        
        # new functions
        self.toolBar.addAction(self.actionLongestEdge) # longest edge
        self.toolBar.addAction(self.actionWallAverage) # wall average
        self.toolBar.addAction(self.actionWeightedBisector) # weighted bisector
        
        self.toolBar.addSeparator()
        
        # Clears
        self.toolBar.addAction(self.actionClear_results)
        self.toolBar.addAction(self.actionClear_all)
        
        self.toolBar.addSeparator()
        
        # Exit
        self.toolBar.addAction(self.actionExit)

        self.retranslateUi(MainWindow)
        
        # ACTIONS ------
        self.actionOpen.triggered.connect(self.openClick) # type: ignore
        self.actionMinimum_bounding_rectangle.triggered.connect(self.mbrClick) # type: ignore
        self.actionPCA.triggered.connect(self.pcaClick) # type: ignore
        
        # new actions
        self.actionLongestEdge.triggered.connect(self.longestEdgeClick)
        self.actionWallAverage.triggered.connect(self.wallAverageClick)
        self.actionWeightedBisector.triggered.connect(self.weightedBisectorClick)
        
        self.actionClear_results.triggered.connect(self.clearClick) # type: ignore
        self.actionClear_all.triggered.connect(self.clearAllClick) # type: ignore
        self.actionExit.triggered.connect(MainWindow.close) # type: ignore
        
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
    
    # ACTION REACTIONS ------
    def openClick(self):
        #Create object
        io = pio()

        size = self.Canvas.size()
        w = size.width()
        h = size.height() 
        building = io.loadData(w,h)
        
        #self.Canvas.setData(data)    
        if building != None:
            self.Canvas.setData(building)
    
    # MBR CLICK ------
    def mbrClick(self):
        buildings = self.Canvas.getBuilding()
        a = Algorithms()
        mbrs = []
        ef = 0
        rot_10 = 0
        for building in buildings:
            mbr = a.createMBR(building)
            mbrs.append(mbr)
            ef = ef + a.Efficiency(mbr,building)%360
            if (a.Efficiency(mbr,building)%360) < 10:
                rot_10 = rot_10 + 1
                
        self.Canvas.setMBR(mbrs)
        self.Canvas.repaint()
        EF = round(ef/len(buildings),5)
        print("MBR  " + str(EF))
        print("MBR - buildings rotated under 10° - " + str(rot_10/len(buildings)*100) + "%")
        
    
    # PCA CLICK ------
    def pcaClick(self):
        buildings = self.Canvas.getBuilding()
        a = Algorithms()
        pca_results = []  # list of PCAs
        ef = 0
        rot_10 = 0
        for building in buildings:
            pca_result = a.createERPCA(building)
            pca_results.append(pca_result)
            ef = ef + a.Efficiency(pca_result,building)%360
            if a.Efficiency(pca_result,building)%360 < 10:
                rot_10 = rot_10 + 1
            
        self.Canvas.setER(pca_results)  # paint all PCAs
        self.Canvas.repaint()
        EF = round(ef/len(buildings),5)
        print("PCA  " + str(EF))
        print("PCA - buildings rotated under 10° - " + str(rot_10/len(buildings)*100) + "%")

        
        
    # WALL AVERAGE CLICK ------
    def wallAverageClick(self):
        buildings = self.Canvas.getBuilding()
        a = Algorithms()
        wa_results = []  # list of WAs
        ef = 0
        rot_10 = 0
        for building in buildings:
            wa_result = a.wallAverage(building)
            wa_results.append(wa_result)
            ef = ef + a.Efficiency(wa_result,building)%360
            if a.Efficiency(wa_result,building)%360 < 10:
                rot_10 = rot_10 + 1
        self.Canvas.setWA(wa_results)  # paint all WAs
        self.Canvas.repaint()
        EF = round(ef/len(buildings),5)
        print("Wall Average  " + str(EF))
        print("WA - buildings rotated under 10° - " + str(rot_10/len(buildings)*100) + "%")
        
        
    # LONGEST EDGE CLICK ------
    def longestEdgeClick(self):
        buildings = self.Canvas.getBuilding()
        a = Algorithms()
        le_results = []  # list of LEs
        ef = 0
        rot_10 = 0
        for building in buildings:
            le_result = a.longestEdge(building)
            le_results.append(le_result)
            ef = ef + a.Efficiency(le_result,building)%360
            if a.Efficiency(le_result,building)%360 < 10:
                rot_10 = rot_10 + 1
        self.Canvas.setLE(le_results) # paint all LEs
        self.Canvas.repaint()
        EF = round(ef/len(buildings),5)
        print("Longest Edge  " + str(EF))
        print("LE - buildings rotated under 10° - " + str(rot_10/len(buildings)*100) + "%")
        
    # WEIGHTED BISECTOR CLICK ------
    def weightedBisectorClick(self):
        buildings = self.Canvas.getBuilding()
        a = Algorithms()
        wb_results = []  # list of WBs
        ef = 0
        rot_10 = 0
        for building in buildings:
            wb_result = a.weightedBisector(building)
            wb_results.append(wb_result)
            ef = ef + a.Efficiency(wb_result,building)%360
            if a.Efficiency(wb_result,building)%360 < 10:
                rot_10 = rot_10 + 1
        self.Canvas.setWB(wb_results) # paint all WBs
        self.Canvas.repaint()
        EF = round(ef/len(buildings),5)
        print("Weighted Bisector  " + str(EF))
        print("WB - buildings rotated under 10° - " + str(rot_10/len(buildings)*100) + "%")
    # CLEARS ------
    def clearClick(self):
        # Function of clear results button
        self.Canvas.clearData()
        self.Canvas.repaint()
    
    def clearAllClick(self):
        # Function of clear all button
        self.Canvas.clearAllData()
        self.Canvas.repaint()


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Simplify buildings"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuSimplify.setTitle(_translate("MainWindow", "Simplify"))
        self.menuView.setTitle(_translate("MainWindow", "View"))
        self.toolBar.setWindowTitle(_translate("MainWindow", "toolBar"))
        self.actionOpen.setText(_translate("MainWindow", "Open"))
        self.actionOpen.setToolTip(_translate("MainWindow", "Open file"))
        self.actionExit.setText(_translate("MainWindow", "Exit"))
        self.actionExit.setToolTip(_translate("MainWindow", "Close application"))
        self.actionMinimum_bounding_rectangle.setText(_translate("MainWindow", "Minimum bounding rectangle"))
        self.actionMinimum_bounding_rectangle.setToolTip(_translate("MainWindow", "Simplify using minimum bounding rectangle"))
        self.actionPCA.setText(_translate("MainWindow", "PCA"))
        self.actionPCA.setToolTip(_translate("MainWindow", "Simplify building using PCA"))
        self.actionClear_results.setText(_translate("MainWindow", "Clear results"))
        self.actionClear_all.setText(_translate("MainWindow", "Clear all"))


    
    
    
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
    
    
    